@@include  https://raw.githubusercontent.com/nurulc/tryitjs/master/asset/all-tools.try


!md
# Get Data - World Covid Report

## Use 'fetch' to get some raw data

We will use world covid-19 daily statistics, this is a csv file that we will split into an array of lines. We can use the built in fetch
function to pull data from the public repository on Github. Fetch returna a __promise__. To learn more about <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises" target="_blank">___Promise___</a> on the link. Once the promise resolves, the data will
be available for use. As always last expression in the script will be displayed. If the value is a promise, TryITjs will wait for the promise to resolve and then display the result.


!tryit
	
	var csvData;
	
	var WORLD_DATA_SRC ='https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv';
	var p = fetch(WORLD_DATA_SRC)
  		.then(response => response.text())
  		.then(data => 
          Promise.resolve(csvData = data)
      );

// The result from the last expression is displayed automatically.
// The in-built display facility is Promise aware, and will unwrap the promise 
// before displaying the data.

p  // note p is a promise, the display will wait for the promise to resolve

!md
## Split into lines

Since csvData is just a big ___string___ we can use the `string.split` opertation to convert it to an array of lines, where each line is a string.

!tryit
//
    // Split and dispaly the lines
    csvData.split('\n');
!md
##Create a frame from the data

Since the CSV data is just a big string, to converts it to a frame we have to do the following

* Split the string into an array of lines, and javascript string already supports the __.split('\n')__ method
* Now each line is a string, we have to split each line into an array of columns
    * We cold use split again on " , " but CSV files allow us to escape a comma by surrounding it with " , " (comma). Since split will split on every comma we cannot use that.
    * __csvLine(aLine)__ will split a 'CSV' line into an array of column values. This is also known as a line splitter, the following line splitter exist
        * csvLine - for CSV files
        * tsvLine - for tab seperated values
        * psvLine - '|' pipe seperated value. THis si a common format in healthcare 
* The columns of the first line is used as the column names, the remaining lines are the data
* We have a convinience function to perfrom this task __Frame.frameFronString(string, )

The following code is a simplified version of what __.frameFromString__ does
```
//frameFromString is at its core the following code
   var lines = csvData.split('\n').map(csvLine);
   var covidFrame = new Frame(lines.slice(1), lines[0]);

``` 

Create a frame from string in the CSV file using the script below. Once we have the Frame we can show the first 20 rows using `.slice` similar to slice on a Javascript Array, and as always the last expression is displayed in the results area.

!tryit
  var { csvLine, Frame } = DataFrame;
  var covidFrame = Frame.frameFromString(csvData, csvLine);
 
  // Display the first 20 results
  covidFrame.slice(0,20);

!md
    ### What happened

    We converted a string to a frames. 
    * **csvData** _The string beinng the contents of a CSV (comma seperated values) representation of a table._
    * **csvLine** _function to convert one row (in string form) into an array of strings.
    * Note: The frame data is nicely rendered in the output area. TryITjs when displaying data checks to see if the object implements `obj._toHtml()` and uses that to render the display. 

    In the next section we will see how we can further improve Frame rendering by overriding the `_toHtml` method. Although in the tutorial for Frame we will not be using this capability, but it is a useful thing to know for those creating their own TryITjs tutorials.

    # Improving rendering of frame

    A Frame has a method __.&#95;toHml()__ to render a frame as HTML. This is a nice Table rendering module __DataTable__. Details for useing this 
    capability can be found here: <a href="https://datatables.net/" target="_blank">DataTable</a> - a plug-in for the jQuery Javascript library. 

    More details about rendering a DataFrame (or any other object) to HTML: <a href="#">Docs: displaying results (TODO)</a>
    
    We can customize the rendering as follows:

!tryit
// mark the indentation
Frame.prototype.toOrder = function(bFlag=true) {
  this._toOrder = bFlag;
  return this;
}
Frame.prototype._toHtml = function() {
  let id = 'T'+Math.round(Math.random()*100000);      // create a unique id fo the table

  // $$.lastly(funcToExecute) after all HTML rendering (from this script) has completed
  // Note $$.<methods> is just part of the 'TryitJS' capability and is not part of DataFrame
  // <method> = D, or HTML, or JSON -- this render to to display 'div' 
  
  $$.lastly(() => {
      const self = this;
      const HTMLformat = this.constructor.HTMLFormat;  // rendering defaults for values in the frame
      
      // Render a cell
      function cellRender(data,type) {
        if(type !== 'display') return data;
          if(isNumber(data))  return HTMLformat.number(data,0,self);
          else return HTMLformat.other(data,0,self);
      }

      function  createTable(self, toSort) {
        return $('#'+id).DataTable( {
          data: self.data,
          columns: self.columns.map(c => 
            ({
                title: c.replace(/_/g, ' '), 
                render: cellRender
              })
            ),
          deferRender:    true,
          ordering: toSort
          
        });
      }

      let table = createTable(self, false);
      let v = document.querySelector(`#${id}sort input`).onchange = (
        function () { 
          console.log('this: ', this.checked);
          table.destroy();
          table = createTable(self, this.checked)
        });
      //console.log('input:', v);
  })
  return `
  <style>
    .dataTables_length {
      margin-left: 2rem;
    }
   .array-sorting {
     position: relative;
     margin-left: 40%;
     top: 2rem;
   }
   .dataTables_filter {
     margin-right: 2rem;
   }
   .sorting_desc::before {
      content: "\u25BC";
      color: red;
   }
   .sorting_asc::before {
      content: "\u25B2";
      color: red;
   }
   .sorting_disabled::before {
       content: "" !important;
    }

  </style>
  <div id="${id+'sort'}" class="ui slider checkbox array-sorting">
    <input type="checkbox" name="toggle">
    <label>Allow Sorting</label>
  </div>
  <table id="${id}" class="display" width="96%"></table>`;
}
function isNumber(x) {
  if(x === 0) return true;
  if( !x ) return false;
  let v = +x;
  return !(isNaN(v));
}


// Display a frame using the DataTable module 
$$.HTML(`<div style="font-size: 2rem">Click columns to sort</div><br>`);
covidFrame.filter(ro => ro.iso_code === 'USA');    
         

!md

@@include plot-covid-frame.try
