
!md
    # Organize the covid data

    ## Select Critical Columns

    In this section we will show how to:

    1. Select the following columns from covidFrame:
         * **iso_code** - 
         * **location** -
         * **date**
         * **total_cases**
         * **total_deaths** 
         * **mortality** _Computed column  `100*total_deaths/total_cases` percent of people who die after contracting COVID-19

!tryit
    var countries = covidFrame.filter(ro => ro.total_cases > 0)
            .select([
               'iso_code',
               'location',
               'continent',
               'date',
               'new_cases', 
               'new_deaths',
               'total_cases', 
               'total_deaths',
               'total_deaths_per_million',
               'total_cases_per_million',
               'population',
               ['mortality',(v,ro) => 100.0*(ro.total_deaths/ro.total_cases)]
      ]);

    // Display the result for USA
    countries.filter(ro => ro.iso_code === 'USA')   
      
      
!md
    # Rolling Up Data

    This section will demonstrate the groupBy capability of DataFrame to create summary of data.

    ## Roll up data into continents

    Next we want to rollup the data into continents, for this we will use the group
    the data by `continent` 

!tryit
    countries.groupBy(['continent'])

!md
    This is not quite what we need, since this is just giving us the continent names, we also need
    to keep the `date` column

!tryit
    var sample = percent => () => Math.random() < (percent/100.0); // sampling filter

    countries = countries.filter(ro => ro.continent); // remove where no continent data

    countries.groupBy(['continent', 'date'])
      .filter( sample(2.0) ) // sample 2% of the data

      
!md
    Next we want to aggrigate the `total_cases` and `total_deaths`, so we need to sum (add up) the 
    thos value for every country in a continent and also on that date. We have a operation for that
    in the groupBy, 

    * gb.sum('column_name')

!tryit
    var { gb } = DataFrame;

    // Find countries that have the highest value in 'column', e.g. topN(3,countries, 'total_cases') 
    //  Top 3 countries with highest cases
    function topN(n,countries,column) {
      return countries.groupBy(['location', gb.sum(column)]).sort(['-'+column]).slice(0,n).map(ro => ro.location);
    }

    var topCountries = topN(3,countries, 'total_cases'); // get top 'total_cases' countries

    var continents = countries
      .filter(ro => ro.continent) // remove locations not in a continent

       // Treat top countries (highest total_cases) as if the were a continent is themselves
       // for those countries change ther 'continent' to the country name (location)
      .update({ continent: (v,ro) => topCountries.indexOf(ro.location) !== -1?ro.location:v })
      
      .groupBy([    
        'continent', 
        'date', 
        gb.sum('total_cases'),  // sum (total_cases) on each day, for every country, in a continent
        gb.sum('total_deaths'), // ditto for total_deaths
        gb.sum('new_cases'), 
        gb.sum('new_deaths'),
        gb.value('total_deaths_per_million',0),
        gb.value('total_cases_per_million',0),
        gb.sum('population')
      ]).update({
        total_deaths_per_million: (v,ro) => ro.total_deaths/ro.population*1000000,
        total_cases_per_million: (v,ro) => ro.total_cases/ro.population*1000000
      });

    // Display a sample
    //$$.D(topN(7,countries, 'total_cases'));
    //$$.D(countries);
    continents.filter(sample(2.0))
       
      
      
      

!md
    <br/>
    You will notice countries have a 'iso_code' and a 'location' namely the country 

    @@include continent-pie.try

!md
    # More Rollup

    This time we will rollup data into countries and continents

    1. We have a frame for `continents`
    2. We will make continents frame have the same shape as the country data
       * We need to add 2 columns `iso_code` and `location`
       * Since these columns do not exist for continents frame, we will have to compute that
           * The simplest way is to use the same value as the `continent` column
           * We will also create a new coulmn `mortality` this value is computed by dividing `total_deaths` by `total_cases` 

    In the following section we will show you how to do that using the `select` method of a frame.

    ## Countries and continent 
    The countries and continents are similar but not identical, so we cannot combine them into a single table. 

    1. Continests frame do not have  `iso_code` and `location` columns. 
    1. We can fix that using frame.select

!tryit
//
    continents = continents.select([
       ["iso_code", (v,ro) => ro.continent],
       ["location", (v,ro) => ro.continent],
       "continent",
       "date",
       "new_cases",
       "new_deaths",
       "total_cases",
       "total_deaths",
       "total_deaths_per_million",
       "total_cases_per_million",
       "population",
       ["mortality", (v,ro) => 100.0*(ro.total_deaths/ro.total_cases)],
      ]
    );

    continents


!md
    2. and augment the data for mortality (%) `total_deaths/total_cases` - a computed value

!tryit
    
    $$.HTML('<p class="huge">CONTINENT - North America from Match 2020</p>');
    $$.D(continents.filter(ro => ro.continent === 'North America' && ro.date > '2020-03').slice(0,10));
!md
    Now that we have the **countries** frame and the **continents** frame in the same shape
    we can combile the into one table using the concat method

!tryit
    var countryContinent = countries.concat(continents); // add the continents to the frame (we hade sure that the both have the same shape - columns)

    //Get Data for USA
    $$.HTML('<p class="huge">country - USA from March 20202/b>')
    countryContinent.filter(ro => ro.iso_code === 'USA' && ro.date > '2020-03') // display data for USA   
            
      
!md
    ## Plot USA Covid data

    Plot the data using the beautiful plotly library. So first thing we need is a plottting function based on the plotly.js library. This library has to do the following:

    ### Utils for doing line plots
    @@include plotting-utils.try

!md 
    ## Plot Country Covid data
    *  From the we have already created the country and continent data frame. THe frame consists of the following fields:
         * **iso_code** 
         * **location** 
         * **date**
         * **total_cases**
         * **total_deaths** 
         * **mortality**
    * Creating continent wide data

    Data Frames have a powerful aggrigation capability in `frame.groupBy`, this capability is built on an similar capability in SQL, namely `groupby`. The key idea here is to collect
    into groups all rows that have the sane value in a column, or a set of columns. On each group we can the apply come aggrication operation on some of thr remaining columns. 

      
!tryit
    // ================================== UI TO Select a country  and continent ============================


    // ======================  Selector for country ==================

    let countryDropdown = UIcategoryList(
        countryContinent.groupBy(['iso_code=ID', 'location=title', 'continent=category']).asObjList(), // list of items to select from
        { caption: 'Select Country', 
         onSelect: result => selCountry({C: result.ID})
         }
      );

    // ================ Selector for continents ==================

    function options(countryContinent, selected) {
      return countryContinent.groupBy(['iso_code', 'location'])
                    .sort(['location'])
                    .map(ro=> `<option value="${ro.iso_code}" ${ro.location === selected?'selected':''}>${ro.location} 
                                    
                               </option>`)
                    .join('\n');
    }

    let continentDropdown = `
    <p class="ui header huge">Select a Continent</p>
    <select class="ui selection dropdown" 
            name="continents" id="continents" 
            onchange="selCountry({R: this.value})">
      ${options(countryContinent.filter(ro => ro.iso_code === ro.location), 'North America')}
    </select>`;

    // ================================================================================================================ 
    // Render dropdowns


    $$.D(HTML(countryDropdown),HTML(continentDropdown));

    // =================================================PLOTTING UTILS===================================================
    // Find out the location fo the current tryit script
    let dn = $$.executeDiv +'-plot';


    var OPTS = ({ C: 'USA', R: 'North America'});
    var isLinear = true;
    function selCountry(opts) {
      console.log(opts);
      if(opts) {
        OPTS = Object.assign(OPTS, opts);
        console.log(OPTS);
      }
      doPlot(countryContinent,[OPTS.C, OPTS.R], dn,isLinear, {scrollZoom: true});
    }


    // ===================== Plot initial data ============================

    $$.HTML(`<div id="${dn}" class="plot" />`);
    $$.lastly(
      () => doPlot(countryContinent, ['USA', 'North America'], dn,isLinear,{scrollZoom: true})
    );
    isLinear = true;
!md 

## Some UI Test 

!tryit

    let list =[];
    function add(category, ...values) {
      let base = list.length;
      let newList = values.map((title,ix) =>({id: base+ix, category, title }))
      list = [...list, ...newList];
    }
    add('alpha', 'ab','bc','ca');
    add('num', '1','2','3');
    add('punc', '!@a','@#2','#!3');

var xxx = UIcategoryList( list, 
      {placeholder: 'abc 123 !@#', 
       caption: 'My Caption', onSelect: r => console.log(r)});
$$.D(xxx, HTML('<div style="height: 20rem" />'));
var EventItem = class {
  constructor(context, name, value, type, range) {
    this.context = context;
    this.name = name; 
    this._value = value; 
    this.type = type || getType(value, range); 
    this.range = range;
  }
  get value() {
  }
}
var EventContext = class {
  add(name,value,type, range) {
    let self = this;
    this[name] = { _value: value=== undefined?type.default(), type, range, set: function(v) {this.value = v; } };
    return this;
  }
}

/*

   cont __ = EventContext.types;
   let _ = new EventContext();
   _.add('isLog', true);
    .add('country', 'USA', __.CATEGOTY_LIST, countryList)
    .add('continent', 'North America', __.LIST, continentList)
    .add('columns', ['new_deaths],__.LIST, columnList)
    .on('country' (_) => {_.continent.set(_.country.value.category)})
    .trigger((_) => {
        doPlot(_.country.value.id, _.continent.value.id, _.isLog.value, _.columns.values() );
        _.continent.value.category);
    })


 */

// EventContext.types = {
//   "boolean"
  
// function checkBox(    