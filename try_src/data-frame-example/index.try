@@include summary.try
@@include introduction.try
@@include ../getting-started.try
@@include simple-example.try






@@include covid-world.try
@@include plotly.try


!md
# More Covid Frame
## Show the size of the frame and the column names

* Length of the frame  _(covidFrame.length)_
* All column Names _(covidFrame.columns)_
* List the columns that are mostly numeric _(covidFrame.numericColumns)_

!tryit
var {arrRemove} = DataFrame;


var cf = covidFrame;
var {columns, numericColumns} = cf;
var nonNumericColumns = arrRemove(columns,numericColumns)

var summary = ({ rows: covidFrame.length, 
   "Non Numeric Columns":nonNumericColumns, 
   "Numeric Columns": covidFrame.numericColumns
});

// display
$$.json(summary)


!md

### Show the data summary as a Frame

In order to create the frame we need to do the following
1. Function to count the number of non-empty values in a column `countNonEmptyCells(columnName)`
2. Function to get the __type__ of the column __Numeric__ or __Alpha__ `columnType(colName)`

!tryit
var {Frame} = DataFrame;

var cf = covidFrame;
// Helper function to count number of non-empty values  in a column in the frame _cf_
function countNonEmptyCells(colName){ 
    return cf.groupBy( [gb.count(colName,'count')] ).asObj(0).count ;
}

// Function to get the column type
function columnType(col) { 
  return (numericColumns.indexOf(col) !== -1) ? 'Numeric' : 'Alpha'; 
}

// compute the rows of the frame
let rowsOfTheFrame = 
  cf.columns.map(
      colName => [
        columnType(colName), 
        colName, 
        countNonEmptyCells(colName)
      ]
  );


// construct the data for the frame
let data =
    [  ["rows",    '',  cf.length],
       ...rowsOfTheFrame
    ];

// create a frame from the data and display
new Frame(data, ['Type',"Col_Name", "Non_empty_cells"])
     .sort(['-Non_empty_cells','Col_Name']) // sort the frame


!md
# Get rid of unnecessary columns

In sql we can do this using _select_ columns _from_ table, further the select operation can rename the columns, add new columns, and transform data is columns

We use a similar operation for a data frames using the project

```js
     frame.project([ list of columns])
```
* We can change a column name with the following code, change _location_ to **_country_**
```js
   [..., "location=country",...]
```

We also can reorder the columns by chosing the order of the columns, the example below shows
how to create a new frem from a subset of the original columns and renaming a column

**Note** We can also add new columns by adding a new column name

## Removing data redundency

In the covid table there is a great deal of data redendency and unnecessary data  for example for each row has a ```iso_code``` for each country, country name, and continent. 
In database terminology we say that the data is __not normalized__. In this section we will show how we can normalize the data. 

This section we will look at how to create the following:

1. Create frames with only some of the columns
2. Create frames to remove redundent data.
3. How to combine data from two frames

## But first lets fill some missing data

* iso_code is the unique country code
* Some locations are not countries so they do not have a `iso_code` or a `continent`
* for thos missing value let us set the `iso_code` and continent to the value of `location`

!tryit
// Find out the columns with missing col values for `iso_code` or `continent`
$$.D(covidFrame.filter(ro => !ro.iso_code || !ro.continent).groupBy(['iso_code','continent', 'location']));


!md
### Lets fix those values

!tryit
covidFrame = covidFrame.update({
	iso_code: ((v,ro) => ro.iso_code || ro.location),
	continent: ((v,ro) => ro.continent || ro.location)
});


covidFrame.filter(ro => ro.continent === ro.location)
          .groupBy(['iso_code', 'continent', 'location'])
!md
## 

!tryit
var SELECTED_COLUMNS = [
  'iso_code', 
  'location=country', // rename location to country
  'continent',
  'date',
  'total_cases',
  'new_cases',
  'total_deaths',
  'new_deaths',
  'new_tests',
  'total_tests',
  'positive_rate',
  'population',
  ['INDEX', (value, row) => row.__index$]  // create a new column (INDEX) use the row number as the index
];

var cFrame = covidFrame.select(
      SELECTED_COLUMNS
      ,ro => ro.total_cases > 0 // only keep the rows for a country start from the date of the first case 
);

$$.D( "Show some sample data" );
cFrame.filter(sample(0.1))



			
!html

<div style="display:none">
!tryit
if(!customElements.get('element-details')) {
    customElements.define('element-details',
      class extends HTMLElement {
        constructor() {
          super();
          const template = document
            .getElementById('element-details-template')
            .content;
          const shadowRoot = this.attachShadow({mode: 'open'})
            .appendChild(template.cloneNode(true));
        }
      }
    );
}
$$.HTML(`
<template id="element-details-template">
  <style>
  details {font-family: "Open Sans Light",Helvetica,Arial}
  .name {font-weight: bold; color: #217ac0; font-size: 120%}
  h4 { margin: 10px 0 -8px 0; }
  h4 span { background: #217ac0; padding: 2px 6px 2px 6px }
  h4 span { border: 1px solid #cee9f9; border-radius: 4px }
  h4 span { color: white }
  .attributes { margin-left: 22px; font-size: 90% }
  .attributes p { margin-left: 16px; font-style: italic }
  </style>
  <details>
    <summary>
      <span>
        <code class="name">&lt;<slot name="element-name">NEED NAME</slot>&gt;</code>
        <i class="desc"><slot name="description">NEED DESCRIPTION</slot></i>
      </span>
    </summary>
    <div class="attributes">
      <h4><span>Attributes</span></h4>
      <slot name="attributes"><p>None</p></slot>
    </div>
  </details>
  <hr>
</template>

<element-details>
  <span slot="element-name">slot</span>
  <span slot="description">A placeholder inside a web
    component that users can fill with their own markup,
    with the effect of composing different DOM trees
    together.</span>
  <dl slot="attributes">
    <dt>name</dt>
    <dd>The name of the slot.</dd>
  </dl>
</element-details>

<element-details>
  <span slot="element-name">template</span>
  <span slot="description">A mechanism for holding client-
    side content that is not to be rendered when a page is
    loaded but may subsequently be instantiated during
    runtime using JavaScript.</span>
</element-details> 
`);
!html
<a id="_tryit21">&nbsp</a>
<div class="html ui top attached segment tryit-container " >
	<div class="ui sizer vertical segment" style="font-size: 1rem; padding-top: 2rem;">
		<div class="ui sizer vertical segment bottom">
			<textarea class="tryit ui " id="tryit2">
var {Frame} = DataFrame;

// Note data is and array of rows, div genElement
// and each row is an array of strings, number or boolean

var df = new Frame(data, ['Name', 'Type', 'Value']);

// Display the frame created
df
			</textarea>
		</div>
		<a id="_end_tryit2">&nbsp;</a>
		<div id="tryit21-error" class="tryit-error"></div>
		<div id="tryit21-display" class="tryit-display rendered_html"></div>
	</div>	<div class="ui top attached label">
		<button id="tryit21-run" data-tooltip="Script not ready - Execute 'tryit' scripts above first" class="ui  yellow right labeled icon button exec">     
    	<i class="caret square right icon"></i>
			Run
    </button> &nbsp; 
    <button id="jump_tryit31" class="circular ui icon yellow button jump_next">
			<i class="icon angle double down"></i>
    </button>&nbsp;
		<button class="circular ui icon button green jump_back">
					<i class="icon angle double up"></i>
		</button>&nbsp; 
	  <button id="ra_2" data-tooltip="Execute all scripts above" class="ui right floated button circular icon green run_all"> 
					<i class="fast backward icon"></i> 
		</button>&nbsp; 
    <button id="save_21" data-tooltip="Save all user modifications" class="ui right floated button circular icon green save_data"> 
				<i class="save icon"></i>
		</button>
	</div>
</div>

<a id="_tryit21">&nbsp</a>
<div class="html ui top attached segment tryit-container " >
	<div class="ui sizer vertical segment" style="font-size: 1rem; padding-top: 2rem;">
		<div class="ui sizer vertical segment bottom">
			<textarea class="tryit ui " id="tryit2">
var {Frame} = DataFrame;

// Note data is and array of rows, div genElement
// and each row is an array of strings, number or boolean

var df = new Frame(data, ['Name', 'Type', 'Value']);

// Display the frame created
df
			</textarea>
		</div>
		<a id="_end_tryit2">
&nbsp;</a>
		<div id="tryit21-error" class="tryit-error"></div>
		<div id="tryit21-display" class="tryit-display rendered_html"></div>
	</div>	<div class="ui top attached label">
		<button id="tryit21-run" data-tooltip="Script not ready - Execute 'tryit' scripts above first" class="ui  yellow right labeled icon button exec">     
    	<i class="caret square right icon"></i>
			Run
    </button> &nbsp; 
    <button id="jump_tryit31" class="circular ui icon yellow button jump_next">
			<i class="icon angle double down"></i>
    </button>&nbsp;
		<button class="circular ui icon button green jump_back">
					<i class="icon angle double up"></i>
		</button>&nbsp; 
	  <button id="ra_2" data-tooltip="Execute all scripts above" class="ui right floated button circular icon green run_all"> 
					<i class="fast backward icon"></i> 
		</button>&nbsp; 
    <button id="save_21" data-tooltip="Save all user modifications" class="ui right floated button circular icon green save_data"> 
				<i class="save icon"></i>
		</button>
	</div>
</div>



</div>

!md
## Country Unique Values

!tryit
var cf = covidFrame;
var countryUnique = cf.groupBy([	
  "iso_code","continent", "location",	"population", "population_density", "median_age", "aged_65_older",
  "aged_70_older", "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate", "diabetes_prevalence", "female_smokers",
  "male_smokers", "handwashing_facilities", "hospital_beds_per_thousand", "life_expectancy", "human_development_index"]);
// Display Unique Values
countryUnique 
  
!md

##Get data for Brazil

Here we will use a simpler version of select that keeps all the columns as is and filters out some of the rows. This is the same as the following sql

```
 select * from covidFrame where country = 'Brazil' 
```


!tryit
covidFrame.filter(r => r.location === 'Brazil')

!md

# Split COVID frame 

## Country frame

Create a frame with general country information country information into another frame


When we look at the original __covidFrame__ there is a lot of duplication of data. For example, each row of d

!tryit
var GENERAL_COLUMNS = [
    'iso_code', 'location=country', 'continent', 
    'population', 'diabetes_prevalence',
    "median_age", "aged_65_older", "aged_70_older",
    "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate",
    "female_smokers", "male_smokers", "handwashing_facilities",
    "hospital_beds_per_thousand", "life_expectancy", "human_development_index"
];




var europe  = covidFrame
      .groupBy(GENERAL_COLUMNS)
      .filter(ro => ro.continent === 'Europe');
europe

!md
### Summary of cases by country

* Use the __Frame.groupBy__ to group all data by __country__ and __continent__
* For each group (__country__) do the following
    * Get maximum of __total_deaths__ and give the column the name __deaths__
    * Get count of number of rows (using the 'INDEX' colums) and call the column __count__, __Note: count the number of non empty values__
    * Get maximum of __total_cases__ and call the column __cases__
    * Get maximum of __population__ column, since this value does not change we can just use it as a part of the grouping operation


!tryit
var {sum, count, max, mean} = gb; // aggrigator functions for groupBy

var summary = cFrame.groupBy(
  ['country','continent', 
    max('total_deaths','deaths'), // show the maximum value of 'total_deaths' and call it deaths 
    count('INDEX', 'count'),      // count the number of entries (daily info) for each country
    max('total_cases','cases'),   // show the maximum value of 'total_cases' and call it 'cases' 
    'population'                  // we could also `max('population')` if we ar not sure the polulation changes
  ])
  .sort(['continent', '-cases']);  // sort continent and cases, the cases in descending order

//display
summary

!md
## Lets try to improve the display of numbers

Frame supports number formattion function.

* Set a global formatting function for numeric data 
__Frame.HTMLFormat.number = toStr__ 
* __toStr(s: string)__ 
takes a string (or number) and returns a fromatted numeric string with commas add to make is easier to read
* This does not alter the data in the frame


!tryit
function addCommas(nStr) {
    nStr += ''; // conver string or number to a string
    var [whole, fraction] = nStr.split('.'); // split on decimal point
    
    fraction = fraction ? '.' + fraction : ''; // add a '.' before the fractional part
    var rgx = /(\d+)(\d{3})/;  // find more then 3 digits without a comma seperator at the end of the string
    while (rgx.test(whole)) {
            whole = whole.replace(rgx, '$1' + ',' + '$2'); // add a comma seperator
    }
    return whole + fraction;
}

function toStr(str) {
  const {abs,round} = Math;
  let num = (+str);
  if(abs(round(num)-num) < 1e-6) num = Math.round(num);
  else if(abs(num)>1000) num = round(num);
  else if(abs(num)>1) num = round(num*100)/100;
  return addCommas(num.toString());
}
Frame.HTMLFormat.number = toStr; // set the function to display numbers


// Display
$$.D(summary);
$$.D(summary.asObj(0)); // show the original data
!md

* As you can see the numbers are nicely formatted, __Note:__ this is for display only, the data in the frame is not changed.

* Please feel free the edit the code and 


!md

#Summarize the information by continent

This section will reformat the data by __continent__ to create summary by continent

* Group By __continent__

!tryit
//
var continent_summary = 
    summary.groupBy(['continent', sum('deaths'),  count('country', 'countries'), mean('deaths', 'avg_by_country'), sum('cases'), sum('population')]);

// Display it
continent_summary


!md
### Transpose 

Transpose will rotate the table, the column name comes from the row in the country column. Pay special attention
the 'country' column is call the transpose pivot and it is important all the values in this column are unique. If the values are not unique the result of the transpose will look very weird and may violate the requirement that all the column names rae unique.

!tryit
var {transpose} = DataFrame;

transpose(continent_summary, 'continent')



!md
## Sample 1% (0.01) of the data and show the first 20

* Previously we created __cFrame__ from __covidFrame__ just keeping the most important data

!tryit
var sample = cFrame.filter(()=> Math.random() < 0.01 ) // take random 1% of data
    .slice(0,20)                          // take the first 20 
    .sort(['continent', 'country'])      // sort by continent and country
sample
!md
* The code / display above demonstrates how to display a sample of the data


!md
## Create some utility function to round a numeric string

This section will show you how to display large numbers in a human friendly format

* Since all data is stored as strings or number, empty values are represented ny the empty string
* The __Math.round__ function will convert it to a numeric round the value convert back to a string


!tryit
// Since all data is stored as strings
// The round function will convert empty strings to '0', will round the value



function round(v) {
    var r = +v;
    if(isNaN(r)) return '0';
    return Math.round(r);
}

// Test the function
var testS = ({
  "Round a non-numeric": round('abc'),
  "Round an integer": round("124"),
  "Round a negetive integer": round("-125"),
  "Round an real": round("124.3"),
  "Round a negetive real": round("-125.6")
});

//Display testS
testS

!md
##Make sure no numeric column has empty values

To do this we use the frame.update method, this method take an **_update object_** as a parameter

!md
 *  We need to find columns that are mostly numeric '90%' or empty, _frame.numericColumns_ will get
us the list of those column names


 *  To apply a update function on a column we use the __Frame.update__ method.
 *  This method takes a mapping objec as a paremeter
 *  The mapping object has as the key the coulmn name and value is the function to apply to the coulmn
 *  The function takes two values __mappingFunc1(columnValue, rowObject)__
     *  The result of the function is set to the column

*  The mapping obj should look like  

```
{
  col1: forceZero,
  col2: forceZero,
  ...
}
```

* The columns are the numeric columns of the frame, and we can get that __cFrame.numericColumns__

!tryit
function forceZero(v) { return round(v || '0')}

var NUMERIC_COLS = cFrame.numericColumns;
var col_update_list = NUMERIC_COLS.map(col => [col,forceZero]);
var TO_ZERO = Object.fromEntries(col_update_list);
$$.D('Numeric Columns');
$$.D(NUMERIC_COLS);

$$.D("TO_ZERO MAPPER");
TO_ZERO

      

!md
**What happened**

This create and update mapping object. Let us apply this to update the frame (as always this will create a new frame)

!tryit
// Update the frame so that all empty value in numeric columns is set to zero 
var xFrame = cFrame.update(TO_ZERO);

//Display the frame
$$.D(xFrame)


!md
Now I will show you a rather useful function in the __DataFrame__ library 

   **Before** we do this let us introduce some useful utility function in the DataFrame package __arrProd__. So let look at what we need to do: 


!tryit
var {arrProd} = DataFrame;
var p1 = arrProd(['a','b','c'], 'x'); // [ ['a', 'x'], ['b', 'x'], ['c', 'x'], ]
var p2 = arrProd('x', ['a','b','c']); // [ ['x', 'a'], ['x', 'b'], ['x', c'], ]
var p3 = arrProd(['a','b'], ['X', 'Y'])// [ ['a', 'X'],['a', 'Y'], ['b', 'X'], ['b', 'Y'], ]


$$.D("var p1 = arrProd(['a','b','c'], 'x')",  p1);
$$.D("p2 = arrProd('x', ['a','b','c'])",      p2);
$$.D("p3 = arrProd(['a','b'], ['X', 'Y'])",   p3);

!md

So using the arrProd becomes

!tryit

var TO_ZERO = Object.fromEntries(arrProd(NUMERIC_COLS, forceZero));
cFrame = cFrame.update(TO_ZERO);
//
//Display
cFrame


!md
###Create a summary of covid data
!tryit
let round_some_columns =  { 
    total_cases: round, 
    max_new_cases_in_a_day: round,
    avg_new_cases_in_a_day: round
};

cFrame.groupBy(['continent','country', // columns to group on
               gb.count('date', 'rows'), // count the number of values in the date column after grouping
               gb.max('total_cases'), // get the max value in the total_cases column for the group 
               gb.max('new_cases', 'max_new_cases_in_a_day'), // get the max value in the total_cases 
                                                             // column for the group and give it the name 'max_new_cases_in_a_day 
               gb.mean('new_cases', 'avg_new_cases_in_a_day') // get the average value for new cases
              ])
    .update( {...round_some_columns, avg_new_cases_in_a_day: (v,ro) => round(ro.total_cases/ro.rows)} )
    .sort(['-total_cases', 'continent']) // rows, continent and total_cases is sorted in descending order: 
      

!md
## Normalizing data

As you will notice in the covidFrame there is a lot of redundent data, for example most of the country data is repeated
on ever row for thar country and there is some missing data for example iso_code is not present for every locaton. Since we would like to use the `iso_code` as the unique key for every country, let us find the locations with missing `iso_code`

!tryit

covidFrame.groupBy(['iso_code', 'location']).filter(ro => !ro.iso_code) 

