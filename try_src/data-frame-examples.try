!head
<title>Data Frame Examples</title>
<meta name="viewport" content="width=device-width, initial-scale=0.7">
<!-- Load plotly.js into the DOM -->
  <script src='https://cdn.plot.ly/plotly-latest.min.js'></script>
<script src="https://unpkg.com/str-data-frame@^0.2/dist/bundle.js"></script>
<link href="https://fonts.googleapis.com/css2?family=Dosis:wght@400;600;800&display=swap" rel="stylesheet">
<!-- font-family: font-family: 'Dosis', sans-serif; -->
<link href="https://fonts.googleapis.com/css2?family=Titillium+Web:ital,wght@0,400;0,600;0,700;0,900;1,400;1,600;1,700&display=swap" rel="stylesheet">
<!-- font-family: 'Titillium Web', sans-serif; -->



@@include tools.try

!html

!md
@@include plotly.try
@@include summary.try
@@include introduction.try
@@include getting-started.try
@@include simple-example.try



## Contents of DataFrame package 

* Get all the entries in the DataFrame (package object).

!tryit
var data = Object
  .entries(DataFrame)
  .map(([key,value]) => [key , getType(value), D(value)]);

// Display the data [ [ [key, type-of-value, value ] ...]
data

!md

## Convert the data into a Frame

!tryit
var {Frame} = DataFrame;

// Note data is and array of rows, div genElement
// and each row is an array of strings, number or boolean

var df = new Frame(data, ['Name', 'Type', 'Value']);

// Display the frame created
df
!md
## Frame structure

![](../../image/data-frame-structure.PNG)

###Frame attributes

* length -- number of rows
* columns -- the columns names
* data    --
* Row Object

#### length property

This property gives us the number of rows in a frame and is just a shorthand for df.data.length

!tryit
df.length
!md
#### columns property

This give us the names of the columns
!tryit
df.columns
!md
#### data property
This is the data actual in the Frame __df__
!tryit
df.data

!md
This data is just the array used to create the frame in the first place

# Row Object df.asObj(i)
The row data is rather anoying to to access the data so a proxy object is created refered to as a RowObject what allows you to access the columns by name. The implementation is very efficient and there is little penalty using it. We will discuss this a little later. 

!tryit
// access the first row

const ROW = 0;
let r = df.asObj(ROW);
let d = df.data[ROW];
//=============== DISPLAY ============================= 

$$.HTML("<p><b>Different methods of accessing row data</b></p>");
$$.D("JSON",JSON.stringify(r));
$$.D([
  ['Name',r.Name , d[0]], 
  ['Type', r.Type, d[1]], 
  ['Value', r.Value, d[2]] 
]);

$$.HTML( "<p><b>Display the row</b></p>"); 
$$.D(r);
r.__data     


!md
### find method to search for a row

The _df.find_ method takes a test function as its only argument, the test fuction recieves a row object for each row of the frame until matching row is found - when the function returns true. The find method returns _undefined_ if ther is no matching row is found, otherwise __find__ returns the matching row object. 

This is a low level method and usually ther are better ways to do this.

!tryit
// look for a row with the name 'select'
var r = df.find(ro => ro.Name === 'trimListElements');

// display r
r


!md

# Group BY operations

We borrow a concept from SQL the group by - this creates groups of rows that have the same value in a set of selected __column(s)__ and perform some operation on each of those row
groups. Some of the operations include (they are all in the namesapce _**gb**_ )

     * gb.count // count the number of non-empty values is a group
     * gb.max - // maximun value of a column in a group
 
As you can see every row in Frame __df__ has a __Type__ and a __value__  columns. We can use the __.groupBy()__ to do many grouping operations. The following snippets will give a flavor of the things that can be done.

### Find all unique values is a column

The simplest use is to show the unique values of a coulmn or a set of columns, we will see more of that later. 

> aFrame.groupBy(['col1', 'col2' , 'col3'])

The code above will all unique combinations of **col1**, **col2**, **col3**

__Note: This is the simplest use of groupBy, later we will see more things you can do with this rather versitile method.

!tryit

// How many different values do we have in the 'Type' column
df.groupBy(['Type'])

!md

So we have 5 different values in the Type column, but we do not the se how many occurences of each of the value do we have in the Frame.

Next we will see how to use the aggrigation functons to extract more information from each group.

### Counting groups

We can count the number using __gb.count__ this function takes two arguments:

1. The column value to count, __Note:__ count only counts non-empty values in that column for the group
1. Whatcolumn name should be given to this count
    1. gb.count(**column-name-to-count**, **name-of-the-resulting-column**)



!tryit
var {gb} = DataFrame; // group by operations


var types = df.groupBy(['Type', gb.count('Type', 'Count#')])

//display types
types

!md
# Reoragizing Frame

In this section we will show you how to reorganize rows and columns. To do this in a useful way, it is ideal to have a column that is the _primary key_. 


## Transpose
To convert rows to columns of a two dimentional matrix we can use the transpose method.

<img style="width: 15%" src="../../image/MATRIX-TRANSPOSE.jpg">

Frame has a similar method, with one small addition: the column names are treated as the first row. We can see the affect of the transpose method below by transposing the frame **types**

!tryit
var {transpose} = DataFrame; // group by operations
transpose(types)

!md
You will notice the headings are just the row index. 

What if we wnt to use one of the columns as the heading? Transpose supports us telling the column that should be used 
as the column names. 

The important property of the column is that all the values must be unique. In a database we call this the unique key for each row. Although for the sake of robustness this version of transpose can deal with a few duplicate as lonk as that is rare. 

In our case the 'Type' column is the unique key, and thus it has the attributes we are looking for.

## Common use of transpose on column

### What is a primary key

This is a column uniquely identifies each row in a frame.

* Transpose on a primary key - making values of the primary key the column headers

!tryit
 $$.HTML("<p><b>Display the frame <i>types</i></b></p>");
// Show original frame
$$.D(types);
//====================
//
// perform the transpose with 'Type' as the primary key
let tr = transpose(types, 'Type');

$$.HTML("<p><b>Transpose the frame <i>types</i></b></p>")
$$.D(tr); // display the transpose

//===============================
// now transpose it back
$$.HTML("<br/><p><b>Get back the original frame - transpose again</b></p>")
transpose(tr,'Type'); // notice a transpose of a transpose on the primary key gets ts 
      
!md
As you can see, columns are converted to rows, and the primary key column becomes the column headers of the new frame.


!md
# Frame objInfo

Th

!tryit

objInfo(Frame)



!md
## Turn objInfo to a array

First we will turn the object to rows and columns suitable for turning it to a frame

!tryit
var {arrProd} = DataFrame;
var frameDesc = Object.entries( objInfo(Frame) ).flatMap( ([key, list]) => arrProd( key, list) ); 
$$.json(frameDesc)
!md
## Turn the array to a Frame

!tryit
var aFrame = new Frame(frameDesc, ['Type', 'Method_Name'])
// display it
aFrame



!md
# Get Data - World Covid Report

## Use fetch to get raw data

We will use world covid-19 daily statistics, this is a csv file that we will split into an array of lines. We can use the fetch
function to pull data from the public repository on Github. Once the promise resolves, the data eill

!tryit
	
	var csvData;
	
	var WORLD_DATA_SRC ='https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv';
	var p = fetch(WORLD_DATA_SRC)
  		.then(response => response.text())
  		.then(data => 
          Promise.resolve(csvData = data)
      );

// The result from the last expression is displayed automatically.
// The in-built display facility is Promise aware, and will unwrap the promise 
// before displaying the data.

p  // note p is a promise, the display will wait for the promise to resolve

/*p.then(str => 
    str.split('\n').slice(0,10).join('\n') // split the large csv string into lines and display the first 10 lines.
)*/

!md
##Create a frame from the data

!tryit
  var {frameFromBuffer, csvLine, arrProd} = DataFrame;

// frameFromBuffer is at its core the following code
//    var lines = csvData.split('\n').map(csvLine);
//    var covidFrame = new Frame(lines.slice(1), lines[0]);

  var covidFrame = frameFromBuffer(csvData, csvLine);
  // Display the first 11 results
  covidFrame.slice(0,11);
  
!md   
!md
## Show the size of the frame and the column names

* Length of the frame  _(covidFrame.length)_
* All column Names _(covidFrame.columns)_
* List the columns that are mostly numeric _(covidFrame.numericColumns)_

!tryit
var {arrRemove} = DataFrame;


var cf = covidFrame;
var {columns, numericColumns} = cf;
var nonNumericColumns = arrRemove(columns,numericColumns)

var summary = ({ rows: covidFrame.length, 
   "Non Numeric Columns":nonNumericColumns, 
   "Numeric Columns": covidFrame.numericColumns
});

// display
$$.json(summary)


!md

### Show the data summary as a Frame

In order to create the frame we need to do the following
1. Function to count the number of non-empty values in a column `countNonEmptyCells(columnName)`
2. Function to get the __type__ of the column __Numeric__ or __Alpha__ `columnType(colName)`

!tryit

// Helper function to count number of non-empty values  in a column in the frame _cf_
function countNonEmptyCells(colName){ 
    return cf.groupBy( [gb.count(colName,'count')] ).asObj(0).count ;
}

// Function to get the column type
function columnType(col) { 
  return (numericColumns.indexOf(col) !== -1) ? 'Numeric' : 'Alpha'; 
}

// compute the rows of the frame
let rowsOfTheFrame = 
  cf.columns.map(
      colName => [
        columnType(colName), 
        colName, 
        countNonEmptyCells(colName)
      ]
  );


// construct the data for the frame
let data =
    [  ["rows",    '',  cf.length],
       ...rowsOfTheFrame
    ];

// create a frame from the data and display
new Frame(data, ['Type',"Col_Name", "Non_empty_cells"])
     .sort(['-Non_empty_cells','Col_Name']) // sort the frame


!md
# Get rid of unnecessary columns

In sql we can do this using _select_ columns _from_ table, further the select operation can rename the columns, add new columns, and transform data is columns

We use a similar operation for a data frames using the project

```js
     frame.project([ list of columns])
```
* We can change a column name with the following code, change _location_ to **_country_**
```js
   [..., "location=country",...]
```

We also can reorder the columns by chosing the order of the columns, the example below shows
how to create a new frem from a subset of the original columns and renaming a column

**Note** We can also add new columns by adding a new column name

## Removing data redundency

In the covid table there is a great deal of data redendency and unnecessary data  for example for each row has a ```iso_code``` for each country, country name, and continent. 
In database terminology we say that the data is __not normalized__. In this section we will show how we can normalize the data. 

This section we will look at how to create the following:

1. Create frames with only some of the columns
2. Create frames to remove redundent data.
3. How to combine data from two frames




!tryit
var SELECTED_COLUMNS = [
  ['iso_code', (iso, ro) => iso || ro.location], // note you have to use the ro.location (original name) and not ro.country
  'location=country', // rename location to country
  ['continent', (c,ro) => c || ro.location], // if no continent data use the ro.location (country) name as the continent
  'date',
  'total_cases',
  'new_cases',
  'total_deaths',
  'new_deaths',
  'new_tests',
  'total_tests',
  'positive_rate',
  'population',
  ['INDEX', (value, row) => row.__index$]  // create a new column (INDEX) use the row number as the index
];

var frame = covidFrame.select(
      SELECTED_COLUMNS
      ,ro => ro.total_cases > 0 // only keep the rows for a country start from the date of the first case 
);

$$.D( "Show first 20 rows" );
frame.slice(0,20)
  
  
!md

##Get data for Brazil

Here we will use a simpler version of select that keeps all the columns as is and filters out some of the rows. This is the same as the following sql

```
 select * from covidFrame where country = 'Brazil' 
```


!tryit
covidFrame.filter(r => r.location === 'Brazil')

!md

# Split COVID frame 

## Country frame

Create a frame with general country information country information into another frame


When we look at the original __covidFrame__ there is a lot of duplication of data. For example, each row of d

!tryit
var GENERAL_COLUMNS = [
    'iso_code', 'location=country', 'continent', 
    'population', 'diabetes_prevalence',
    "median_age", "aged_65_older", "aged_70_older",
    "gdp_per_capita", "extreme_poverty", "cardiovasc_death_rate",
    "female_smokers", "male_smokers", "handwashing_facilities",
    "hospital_beds_per_thousand", "life_expectancy", "human_development_index"
];



var europe  = covidFrame.select(,ro => ro.continent === 'Europe').distinct();
europe

!md
### Summary of cases by country

!tryit
var {sum, count, max, mean} = gb; // aggrigator functions for groupBy

var summary = frame.groupBy(
  ['country','continent', 
    max('total_deaths','deaths'), // show the maximum value of 'total_deaths' and call it deaths 
    count('INDEX', 'count'),      // count the number of entries (daily info) for each country
    max('total_cases','cases'),   // show the maximum value of 'total_cases' and call it 'cases' 
    'population'
  ])
  .sort(['continent', '-cases']);  // sort continent and cases, the cases in descending order

//display
summary

!md
## Lets try to improve the display of numbers

!tryit
function addCommas(nStr) {
    nStr += '';
    var x = nStr.split('.');
    var x1 = x[0];
    var x2 = x.length > 1 ? '.' + x[1] : '';
    var rgx = /(\d+)(\d{3})/;
    while (rgx.test(x1)) {
            x1 = x1.replace(rgx, '$1' + ',' + '$2');
    }
    return x1 + x2;
}

function toStr(str) {
  const {abs,round} = Math;
  let num = (+str);
  if(abs(round(num)-num) < 1e-6) num = Math.round(num);
  else if(abs(num)>1000) num = round(num);
  else if(abs(num)>1) num = round(num*100)/100;
  return addCommas(num.toString());
}
Frame.HTMLFormat.number = toStr;


// Display
summary




!md

#Summarize the information by continent

This section will reformat the data by trans to create summary by continent


!tryit
//summary.groupBy(['continent', 'country'])
var continent_summary = 
    summary.groupBy(['continent', sum('deaths'),  count('country', 'countries'), mean('deaths', 'avg_by_country'), sum('cases'), sum('population')]);

// Display it
continent_summary


!md
### Transpose 

Transpose will rotate the table, the column name comes from the row in the country column. Pay special attention
the 'country' column is call the transpose pivot and it is important all the values in this column are unique. If the values are not unique the result of the transpose will look very weird and may violate the requirement that all the column names rae unique.

!tryit
transpose(continent_summary, 'country')



!md
## Sample 1% (0.01) of the data and show the first 20
!tryit
var sample = frame.filter(()=> Math.random() < 0.01 ) // take random 1% of data
    .slice(0,20)                          // take the first 20 
    .sort(['continent', 'country'])      // sort by continent and country
sample
!md
## Create some utility function to round a numeric string

* Since all data is stored as strings or number, empty values are represented ny the empty string
* The round function will conver it to a numeric round the value convert back to a string


!tryit
// Since all data is stored as strings
// The round function will convert empty strings to '0', will round the value



function round(v) {
    var r = +v;
    if(isNaN(r)) return '0';
    return Math.round(r);
}

// Test the function
var testS = ({
  "Round a non-numeric": round('abc'),
  "Round an integer": round("124"),
  "Round a negetive integer": round("-125"),
  "Round an real": round("124.3"),
  "Round a negetive real": round("-125.6")
});

//Display testS
testS

!md
##Make sure no numeric column has empty values

To do this we use the frame.update method, this method take an **_update object_** as a parameter

* We need to find columns that are mostly numeric '90%' or empty, _frame.numericColumns_ will get
us the list of those column names

!tryit
var {arrProd} = DataFrame;
var p1 = arrProd(['a','b','c'], 'x'); // [ ['a', 'x'], ['b', 'x'], ['c', 'x'], ]
var p2 = arrProd('x', ['a','b','c']); // [ ['x', 'a'], ['x', 'b'], ['x', c'], ]
var p3 = arrProd(['a','b'], ['X', 'Y'])// [ ['a', 'X'],['a', 'Y'], ['b', 'X'], ['b', 'Y'], ]
JSON.stringify([p1, p2, p3])

!tryit
function forceZero(v) { return round(v || '0')}

var NUMERIC_COLS = frame.numericColumns;
var col_update_list = arrProd(NUMERIC_COLS,forceZero);
var TO_ZERO = Object.fromEntries(col_update_list);

!tryit
// Update the frame so that all empty value in numeric columns is set to zero 
frame = frame.update(TO_ZERO)
frame
!md
###Create a summary of covid data
!tryit


var round_some_columns =  { 
    total_cases: round, 
    max_new_cases_in_a_day: round,
    avg_new_cases_in_a_day: round
};

frame.groupBy(['continent','country', // columns to group on
               gb.count('date', 'rows'), // count the number of values in the date column after grouping
               gb.max('total_cases'), // get the max value in the total_cases column for the group 
               gb.max('new_cases', 'max_new_cases_in_a_day'), // get the max value in the total_cases 
                                                             // column for the group and give it the name 'max_new_cases_in_a_day 
               gb.mean('new_cases', 'avg_new_cases_in_a_day') // get the average value for new cases
              ])
    .update( {...round_some_columns, avg_new_cases_in_a_day: (v,ro) => round(ro.total_cases/ro.rows)} )
    .sort(['-rows', '-continent','-total_cases']) // rows, continent and total_cases is sorted in descending order: 
!md
## Normalizing data

As you will notice in the covidFrame there is a lot of redundent data, for example most of the country data is repeated
on ever row for thar country and there is some missing data for example iso_code is not present for every locaton. Since we would like to use the `iso_code` as the unique key for every country, let us find the locations with missing `iso_code`

!tryit

covidFrame.groupBy(['iso_code', 'location']).filter(ro => !.iso_code) 


!html
<div id="msgbox-area" class="msgbox-area"></div>
<script
  src="https://code.jquery.com/jquery-3.1.1.min.js"
  integrity="sha256-hVVnYaiADRTO2PzUGmuLJr8BLUSjGIZsDYGmIJLv2b8="
  crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.4.1/semantic.min.js"></script>

!end
