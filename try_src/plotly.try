!tryit



let p = new Promise((accept,reject) => {
  		Plotly.d3.csv("https://raw.githubusercontent.com/plotly/datasets/master/finance-charts-apple.csv",(err,rows) => {
        if( err ) reject(err);
        else accept(rows); 
  		});
});
$$.D(p) ;
p.then( rows => {
	 doPlot(rows);
});
  
function doPlot(rows) {
  
  function unpack(rows, key) {
     return rows.map(function(row) { return row[key]; });
  }

var trace1 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL High',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.High'),
  line: {color: '#17BECF'}
}

var trace2 = {
  type: "scatter",
  mode: "lines",
  name: 'AAPL Low',
  x: unpack(rows, 'Date'),
  y: unpack(rows, 'AAPL.Low'),
  line: {color: '#7F7F7F'}
}

var data = [trace1,trace2];

var layout = {
  title: 'Time Series with Rangeslider',
  xaxis: {
    autorange: true,
    range: ['2015-02-17', '2017-02-16'],
/*

    rangeselector: {buttons: [
        {
          count: 1,
          label: '1m',
          step: 'month',
          stepmode: 'backward'
        },
        {
          count: 6,
          label: '6m',
          step: 'month',
          stepmode: 'backward'
        },
        {step: 'all'}
      ]},
 */
    rangeslider: {range: ['2015-02-17', '2017-02-16']},
    type: 'date'
  },
  yaxis: {
    autorange: true,
    range: [86.8700008333, 138.870004167],
    type: 'linear'
  }
};

Plotly.newPlot('plot', data, layout);
}
/*
var {redim,zipToDict} = require('../lib')
function groupInfo(aFrame, groupCol, cols) {
    let fr = aFrame.groupBy([
        groupCol, 
        ...cols.flatMap(name => [ gb.value('name', name), gb.min(name, name+'_mn'), gb.max(name, name+'_mx')])
        ]);
    return zipToDict(fr.data.map(row => [row[0], 
                               zipToDict(
                                   redim(row.slice(1), 3).map(([col,min,max]) => [col, [min,max]])
                                   )
                              ]
                      )
    )
}

function linePlot(frame, country, groupCol, cols) {
    let gi = groupInfo(frame, groupCol, cols);
    let xAxis = cols[0];
     let xRange = gi[country][cols[0]];
     let countryFrame = frame.filter(ro => ro[groupCol] === country);
     console.log(xRange);
     data = zipToDict(cols.map(name => [name, countryFrame.rawColumn(name)]));
    
    return data;
}
linePlot(covidFrame, 'Albania', 'location',  ['date', 'new_cases', 'total_cases'])

 */
			
!html
<div id="plot"></div>
!md