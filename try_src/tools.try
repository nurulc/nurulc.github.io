<script>

function D(d) {
	if(d === undefined ) return "<undef>";
	//if(isClass(d)) return d.prototype.constructor.toString();
	if(typeof d === 'function') return "<func body>"; 
	if(d instanceof Date) return d.toString;
	if(typeof d === 'object') return JSON.stringify(d)
	return d.toString();
}

function getType(d) {
	if(d === undefined) return 'undefined'
	if(Array.isArray(d)) return 'Array';
	return typeof d;

}

function textArea(s) {
  return `<textarea>${asHTML(this.s.substr(0,2000))}</textarea>`;
}

function Text(s) {
  if(s === undefined || s.length < 100) return JSON.stringify(s);
  return ({
   s,
   "_toHtml" : textArea 
  });
}

function isClass(d) { return false;
  // try {
  // 	if( typeof d !== "function" ) return false; 
  // 	var x = new d;

  // 	let name = x.constructor ? x.constructor.name : '';
  // 	return (name !== '' && name !==  'Array' && name !== 'Function');
  //  } catch(e) {
  //  	  return false;
  //  }
}

function isEmpty(arrOrObj) {
  if(arrOrObj === '' || arrOrObj === undefined || arrOrObj === null) return true;
  if(Array.isArray(arrOrObj) && arrOrObj.length === 0) return true;
  if(typeof arrOrObj === 'object' && 
      Object.keys(arrOrObj).length === 0 ) return true;
  return false;
}

function timeOf(fn) {
  const name = 'func';
  const t0 = new Date().getTime();

  const res = fn();

  const t1 = new Date().getTime();
  $$.D(`Call to ${name} took ${t1 - t0} milliseconds.`);
  return res; 
}

function getTryitAttr(d) {
  //var d = document.querySelector('#_tryit21 ~ div')

  var ta = d.querySelector('textarea');
  var myId = ta.id;
  var a_after_ta = ta.closest('div ~ div').querySelector('div ~ a');
}


function customElement(element_name,process, ...args) {
  customElements.define(element_name,
  class extends HTMLElement {
    constructor() {
      super();
      process = process || (x => x)
      const template = process(
        document
        .getElementById(elemant_name+'-template')
        .content, ...args);
      const shadowRoot = this.attachShadow({mode: 'open'})
        .appendChild(template.cloneNode(true));
    }
  }
);
}

</script>